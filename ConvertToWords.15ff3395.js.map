{"version":3,"sources":["lib/numberWordMappings.ts","lib/toFixed.ts","lib/isFloat.ts","lib/index.ts","ConvertToWords.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EAAA,QAAA,kBAAoB,CAC/B,CAAE,OAAQ,IAAS,MAAO,WAC1B,CAAE,OAAQ,IAAM,MAAO,YACvB,CAAE,OAAQ,IAAK,MAAO,WACtB,CAAE,OAAQ,GAAI,MAAO,UACrB,CAAE,OAAQ,GAAI,MAAO,UACrB,CAAE,OAAQ,GAAI,MAAO,WACrB,CAAE,OAAQ,GAAI,MAAO,SACrB,CAAE,OAAQ,GAAI,MAAO,SACrB,CAAE,OAAQ,GAAI,MAAO,SACrB,CAAE,OAAQ,GAAI,MAAO,UACrB,CAAE,OAAQ,GAAI,MAAO,UACrB,CAAE,OAAQ,GAAI,MAAO,YACrB,CAAE,OAAQ,GAAI,MAAO,YACrB,CAAE,OAAQ,GAAI,MAAO,aACrB,CAAE,OAAQ,GAAI,MAAO,WACrB,CAAE,OAAQ,GAAI,MAAO,WACrB,CAAE,OAAQ,GAAI,MAAO,YACrB,CAAE,OAAQ,GAAI,MAAO,YACrB,CAAE,OAAQ,GAAI,MAAO,UACrB,CAAE,OAAQ,GAAI,MAAO,UACrB,CAAE,OAAQ,GAAI,MAAO,OACrB,CAAE,OAAQ,EAAG,MAAO,QACpB,CAAE,OAAQ,EAAG,MAAO,SACpB,CAAE,OAAQ,EAAG,MAAO,SACpB,CAAE,OAAQ,EAAG,MAAO,OACpB,CAAE,OAAQ,EAAG,MAAO,QACpB,CAAE,OAAQ,EAAG,MAAO,QACpB,CAAE,OAAQ,EAAG,MAAO,SACpB,CAAE,OAAQ,EAAG,MAAO,OACpB,CAAE,OAAQ,EAAG,MAAO,OACpB,CAAE,OAAQ,EAAG,MAAO;;AC/BtB,aAAA,SAAgB,EAAQ,GACf,OAAA,OAAO,OAAO,GAAQ,QAAQ,IADvC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,QAAA,QAAA;;ACAA,aAAA,SAAgB,EAAQ,GACf,OAAA,OAAO,KAAO,GAAK,EAAI,GAAM,EADtC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,QAAA,QAAA;;ACEA,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,cAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,EAAA,QAAA,wBAAA,SACA,EAAA,QAAA,aAAA,SACA,EAAA,QAAA,aAAA;;AC6EC,aAAA,IAAA,EAAA,MAAA,KAAA,eAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,0BAAA,EA9ED,IAAA,EAAA,QAAA,SAoBA,SAAgB,EAAqB,GACnC,QAAQ,IAAI,4BAA6B,GACnC,IAAA,EAAc,OAAO,EAAA,QAAQ,IAAS,MAAM,KAE5C,EAAK,EAAA,GAAO,EAAc,OAAO,EAAY,MAW5C,OAVoB,IAA3B,OAAO,EAAY,IAAY,EAAM,KAAK,UAAY,EAAM,KAAK,WAGxC,EAAA,QAAQ,KAE/B,EAAM,KAAK,OACX,EAAM,KAAI,MAAV,EAAc,EAAc,OAAO,EAAY,MAC/C,EAAM,KAAK,UAGN,EAAM,KAAK,KAGpB,SAAS,EAAc,GACf,IAAA,EAAkB,GAElB,EAAY,EAAA,kBAAkB,KAClC,SAAC,GAAS,OAAA,OAAO,IAAW,EAAK,SAG7B,EAAa,EAAU,MAGvB,EAAW,KAAK,MAAM,EAAS,EAAU,QAGzC,EAAY,EAAS,EAAU,OAEjC,GAAa,IAAb,EAAgB,CAQd,GAAA,OAAO,EAAU,QAAU,IAAO,EAAG,CACvC,QAAQ,IAAI,kBACN,IAAA,EAAc,OAAO,OAAO,GAAQ,IACtB,IAAhB,IACF,QAAQ,IAAI,cAAe,GAC3B,EAAM,KAAI,MAAV,EAAc,EAAc,KAGhC,EAAM,KAAK,QAEX,EAAM,KAAI,MAAV,EAAK,EAAA,EAAA,GAAS,EAAc,IAAS,CAAE,KAMlC,OAFH,EAAY,GAAG,EAAM,KAAI,MAAV,EAAc,EAAc,IAExC,EA3ET,SAAS,iBAAiB,mBAAoB,WACtC,IAAA,EAAgB,SAAS,eAC7B,cAEI,EAAkB,SAAS,eAC/B,mBAGF,EAAc,iBAAiB,QAAS,WAChC,IAAA,EAAgB,SAAS,eAC7B,eAEI,EAAS,EAAqB,OAAO,EAAc,QAEzD,EAAgB,YAAc,MAIlC,QAAA,qBAAA","file":"ConvertToWords.15ff3395.js","sourceRoot":"../src","sourcesContent":["export const numberWordMapping = [\n  { number: 1000000, value: \"Million\" },\n  { number: 1000, value: \"Thousand\" },\n  { number: 100, value: \"Hundred\" },\n  { number: 90, value: \"Ninety\" },\n  { number: 80, value: \"Eighty\" },\n  { number: 70, value: \"Seventy\" },\n  { number: 60, value: \"Sixty\" },\n  { number: 50, value: \"Fifty\" },\n  { number: 40, value: \"Forty\" },\n  { number: 30, value: \"Thirty\" },\n  { number: 20, value: \"Twenty\" },\n  { number: 19, value: \"Nineteen\" },\n  { number: 18, value: \"Eighteen\" },\n  { number: 17, value: \"Seventeen\" },\n  { number: 16, value: \"Sixteen\" },\n  { number: 15, value: \"Fifteen\" },\n  { number: 14, value: \"Fourteen\" },\n  { number: 13, value: \"Thirteen\" },\n  { number: 12, value: \"Twelve\" },\n  { number: 11, value: \"Eleven\" },\n  { number: 10, value: \"Ten\" },\n  { number: 9, value: \"Nine\" },\n  { number: 8, value: \"Eight\" },\n  { number: 7, value: \"Seven\" },\n  { number: 6, value: \"Six\" },\n  { number: 5, value: \"Five\" },\n  { number: 4, value: \"Four\" },\n  { number: 3, value: \"Three\" },\n  { number: 2, value: \"Two\" },\n  { number: 1, value: \"One\" },\n  { number: 0, value: \"Zero\" },\n];\n","export function toFixed(number: number): number {\n  return Number(Number(number).toFixed(2));\n}\n","export function isFloat(n: number) {\n  return Number(n) === n && n % 1 !== 0;\n}\n","export * from \"./numberWordMappings\";\nexport * from \"./toFixed\";\nexport * from \"./isFloat\";\n","import { NumberWordMap } from \"./types\";\nimport { numberWordMapping, toFixed, isFloat } from \"./lib\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const convertButton = document.getElementById(\n    \"convertBtn\"\n  ) as HTMLFormElement;\n  const resultContainer = document.getElementById(\n    \"resultContainer\"\n  ) as HTMLFormElement;\n\n  convertButton.addEventListener(\"click\", () => {\n    const convertNumber = document.getElementById(\n      \"converInput\"\n    ) as HTMLFormElement;\n    const result = convertNumToCurrency(Number(convertNumber.value));\n\n    resultContainer.textContent = result;\n  });\n});\n\nexport function convertNumToCurrency(number: number): string {\n  console.log(\"convertNumToWords NUMBER \", number);\n  const splitNumber = String(toFixed(number)).split(\".\");\n\n  const words = [...handleConvert(Number(splitNumber[0]))];\n  Number(splitNumber[0]) === 1 ? words.push(\"Dollar\") : words.push(\"Dollars\");\n\n  // Check if input number contains decimals\n  const isFloatingNumber = isFloat(number);\n  if (isFloatingNumber) {\n    words.push(\"and\");\n    words.push(...handleConvert(Number(splitNumber[1])));\n    words.push(\"Cents\");\n  }\n\n  return words.join(\" \");\n}\n\nfunction handleConvert(number: number): string[] {\n  const words: string[] = [];\n\n  const wordMatch = numberWordMapping.find(\n    (elem) => Number(number) >= elem.number\n  ) as NumberWordMap;\n\n  const matchValue = wordMatch.value;\n\n  // quotient dividing inputted # by matched number\n  const quotient = Math.floor(number / wordMatch.number);\n\n  // Remaining value i.e. 33 % 30 === 1.1\n  const remaining = number % wordMatch.number;\n\n  if (quotient === 1) {\n    /*\n      When a number is a power of 10 and starts with 1 (i.e. 100 or 1000) just the Hundred or Thousand value is returned. To resolve this, we check if\n      A. the word match value is a power of 10\n      B. the number starts with a 1\n\n      If both statements are correct, we call the handleConvert function again\n    */\n    if (Number(wordMatch.number) % 10 === 0) {\n      console.log(\"IS POWER OF 10\");\n      const firstNumber = Number(String(number)[0]);\n      if (firstNumber === 1) {\n        console.log(\"firstNumber\", firstNumber);\n        words.push(...handleConvert(firstNumber));\n      }\n    }\n    words.push(matchValue);\n  } else {\n    words.push(...handleConvert(quotient), matchValue);\n  }\n\n  // Recursion: Re-run handleConvert function with remaining value\n  if (remaining > 0) words.push(...handleConvert(remaining));\n\n  return words;\n}\n"]}